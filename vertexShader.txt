#version 330

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 texture_coordinates;
in ivec4 bone_ids;
in vec4 bone_weights;

const int MAX_BONES = 200;

out vec3 fragment_color, position_eye, normal_eye, FragPos, world_normal;
out vec2 textureCoordinates;

// Do all this in vertex shader for gourand shading
vec4 light_position_world = vec4 (200.0, 200.0, 200.0, 1.0); // Light position in world coords.

vec3 Ls = vec3 (100.0, 100.0, 100.0); // white specular colour
vec3 Ld = vec3 (0.7, 0.7, 0.7); // diffuse white colour
vec3 La = vec3 (0.2, 0.2, 0.2); // grey ambient colour

// surface reflectance
vec3 Ks = vec3 (0.0, 0.0, 1.0); // fully reflect specular light
vec3 Kd = vec3 (1.0, 0.5, 0.0); // orange diffuse surface reflectance
vec3 Ka = vec3 (1.0, 1.0, 1.0); // fully reflect ambient light
float specular_exponent = 100.0; // specular 'power'


uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

uniform mat4 bones[MAX_BONES];

void main(){

  mat4 boneTransform = bones[bone_ids[0]] * bone_weights[0];
  boneTransform += bones[bone_ids[1]] * bone_weights[1];
  boneTransform += bones[bone_ids[2]] * bone_weights[2];
  boneTransform += bones[bone_ids[3]] * bone_weights[3];

  mat4 identity;
  identity[0] = vec4(1.0,0.0,0.0,0.0);
  identity[1] = vec4(0.0,1.0,0.0,0.0);
  identity[2] = vec4(0.0,0.0,1.0,0.0);
  identity[3] = vec4(0.0,0.0,0.0,1.0);

  textureCoordinates =  texture_coordinates;;

  mat4 ModelViewMatrix = view * model;
  // Position in view space
  position_eye = vec3(ModelViewMatrix * boneTransform * vec4(vertex_position, 1.0));
  FragPos = vec3(model * boneTransform * vec4(vertex_position, 1.0));

  // normal calculations
  mat3 NormalMatrix =  mat3(ModelViewMatrix);
  
  // Convert normal and position to eye coords
  // Normal in view space
  vec4 tempNormals =  vec4(vertex_normal,1.0);
  normal_eye =  NormalMatrix  * tempNormals.xyz;

  world_normal = normalize(vec3(model *  boneTransform * vec4(vertex_normal,1.0)));

  // calculate lighting
  
  // ambient intensity
  vec3 Ia = La * Ka;

  // raise light position to eye space
  vec3 light_position_eye = vec3(view * light_position_world);
  
  //normalised vector towards the light source
  vec3 distance_to_light = light_position_eye - position_eye;
  vec3 direction_to_light_eye = normalize(distance_to_light);
  
  //dot product gives us the cosine of angle between the vectors
  float dot_prod = max(dot(direction_to_light_eye, normal_eye),0);
  vec3 Id = Ld * Kd * dot_prod; // diffuse intensity

  vec3 reflection_eye = reflect(-direction_to_light_eye, normal_eye);
  vec3 surface_to_viewer_eye = normalize(-position_eye);
  
  float dot_prod_specular = max(dot(reflection_eye, surface_to_viewer_eye), 0);
 
  float specular_factor = pow(dot_prod_specular, specular_exponent);
  vec3 Is = Ls * Ks * specular_factor;
  
  //final color
  fragment_color = vec3(Is + Id + Ia);
  
  // Convert position to clip coordinates and pass along
   gl_Position = proj * vec4(position_eye, 1.0);

}
